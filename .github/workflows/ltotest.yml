name: ltotest

permissions:
  contents: write  
  actions: write   

on:
  workflow_call: 
    inputs:
      codename:
        required: true
        type: string
      repo:
        required: true
        type: string

jobs:
  ltotest:
    runs-on: ubuntu-latest

    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          swap-size-mb: 8192
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Install LLVM and build tools
        run: |
          sudo apt update
          sudo apt install -y \
            clang llvm lld bc make curl git libssl-dev \
            flex bison libelf-dev libncurses-dev \
            gcc-aarch64-linux-gnu ccache build-essential

      - name: Set environment variables
        run: |
          echo "CC=clang" >> $GITHUB_ENV
          echo "LD=ld.lld" >> $GITHUB_ENV
          echo "AR=llvm-ar" >> $GITHUB_ENV
          echo "NM=llvm-nm" >> $GITHUB_ENV
          echo "OBJCOPY=llvm-objcopy" >> $GITHUB_ENV
          echo "OBJDUMP=llvm-objdump" >> $GITHUB_ENV
          echo "STRIP=llvm-strip" >> $GITHUB_ENV
          echo "LLVM=1" >> $GITHUB_ENV
          echo "LLVM_IAS=1" >> $GITHUB_ENV
          echo "CONFIG=${{ inputs.repo }}" >> $GITHUB_ENV

      - name: Clone AnyKernel3 and Kernel Source
        run: |
          git clone --depth=1 https://github.com/spanish33/AnyKernel3.git -b 15.0.0-sultan-zuma
          git clone --depth=1 https://github.com/spanish33/${{ inputs.repo }} -b sultan-susfs
 
      - name: Fix format-security warnings in LWIS sources
        run: |
          cd "${{ env.CONFIG }}"

          echo "Patching lwis_util.c to fix kthread_run format-security warning..."
          sed -i 's/kthread_run(kthread_worker_fn, &lwis_dev->transaction_worker, t_name);/kthread_run(kthread_worker_fn, \&lwis_dev->transaction_worker, "%s", t_name);/' google-modules/lwis/lwis_util.c

          echo "Patching lwis_bus_manager.c to fix kthread_run format-security warning..."
          sed -i 's/kthread_run(kthread_worker_fn, &bus_manager->bus_worker, bus_thread_name);/kthread_run(kthread_worker_fn, \&bus_manager->bus_worker, "%s", bus_thread_name);/' google-modules/lwis/lwis_bus_manager.c

      - name: Suppress unused warning for cur_framelen
        run: |
         cd "${{ env.CONFIG }}"
         sed -i '/uint32 cur_framelen;/a\        (void)cur_framelen;' google-modules/wlan/bcm4398/dhd_ip.c
      - name: Suppress unused warning for free_cnt
        run: |
         cd "${{ env.CONFIG }}"
         sed -i '/uint32 count, free_cnt = 0U, wordix, idmap_ix, bitix, \*bitmap_p;/a\        (void)free_cnt;' google-modules/wlan/bcm4398/bcmutils.c

      - name: Suppress unused warning for band in wl_android.c
        run: |
         cd "${{ env.CONFIG }}"
         sed -i '/uint16 band = 0;/a\        (void)band;' google-modules/wlan/bcm4398/wl_android.c

      - name: Fix extraneous parentheses in wl_cfgvif.c
        run: |
         cd "${{ env.CONFIG }}"
         sed -i 's/(chan_array\[j\] == CHSPEC_CHANNEL(chspec))/(chan_array[j] == CHSPEC_CHANNEL(chspec))/' \
         google-modules/wlan/bcm4398/wl_cfgvif.c

         
      - name: Add KernelSU
        run: |
          cd "${{ env.CONFIG }}"
          curl -LSs "https://raw.githubusercontent.com/spanish33/kernelsu/main/kernel/setup.sh" | bash -
      

      - name: Apply SUSFS and Kernel Config Patches
        run: |
          cd "${{ env.CONFIG }}"
          DEFCONFIG=arch/arm64/configs/${{ inputs.codename }}_defconfig

          echo "CONFIG_KSU=y" >> $DEFCONFIG
          echo "CONFIG_KSU_WITH_KPROBES=n" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> $DEFCONFIG
          echo "CONFIG_TMPFS_XATTR=y" >> $DEFCONFIG
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> $DEFCONFIG

      - name: Configure Kernel and Enable LTO
        run: |
          set -e
          cd "${{ env.CONFIG }}"
          DEFCONFIG=${{ inputs.codename }}_defconfig

          make O=out ARCH=arm64 $DEFCONFIG
          make O=out ARCH=arm64 olddefconfig

          cp out/.config out/.config.before_lto

          scripts/config --file out/.config --disable LTO_GCC
          scripts/config --file out/.config --disable LTO_CLANG_FULL
          scripts/config --file out/.config --disable LTO_NONE
          scripts/config --file out/.config --enable LTO
          scripts/config --file out/.config --enable LTO_CLANG
          scripts/config --file out/.config --enable LTO_CLANG_THIN
          scripts/config --file out/.config --enable LD_LLD

          make O=out ARCH=arm64 olddefconfig

      - name: Debug Config Differences
        run: |
          cd "${{ env.CONFIG }}"
          diff -u out/.config.before_lto out/.config || echo "No config differences detected."

      - name: Apply Patch to Fix Macro Name Formatting
        run: |
         cd "${{ env.CONFIG }}"
         find . -type f -name ".gcip_defs.h" -exec sed -i 's/#define \([a-zA-Z0-9._-]*\)\.\([0-9]*\)/#define \1.\2 /' {} +

      - name: Change Kernel Name
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Changing Kernel Name..."
          sed -i 's/CONFIG_LOCALVERSION="-Sultan"/CONFIG_LOCALVERSION="-android14-11-gd7dac4b14270-ab12946699"/' ./arch/arm64/configs/${{ inputs.codename }}_defconfig

      - name: Wait for wl_cfgvif.c and patch it when available
        continue-on-error: true
        run: |
          cd "${{ env.CONFIG }}"
          FILE="google-modules/wlan/bcm4398/wl_cfgvif.c"
          MAX_WAIT_SECONDS=1500  
          INTERVAL=3
          WAITED=0

          echo "Waiting for $FILE to appear..."

          while [ ! -f "$FILE" ]; do
            if [ "$WAITED" -ge "$MAX_WAIT_SECONDS" ]; then
              echo "Timeout: $FILE not found after $MAX_WAIT_SECONDS seconds."
              break  # DO NOT use exit here
            fi

            sleep "$INTERVAL"
            WAITED=$((WAITED + INTERVAL))
          done

          if [ -f "$FILE" ]; then
            echo "$FILE found. Patching line 1940..."
            sed -i '1940s/.*/                        if (chan_array[j] == CHSPEC_CHANNEL(chspec)) {/' "$FILE"
            echo "Patch applied."
          else
            echo "File not found in time, skipping patch."
          fi

      - name: Suppress unused warning for target_cnt
        run: |
          cd "${{ env.CONFIG }}"
          sed -i '/int8 target_cnt = 0;/a\        (void)target_cnt;' google-modules/wlan/bcm4398/dhd_rtt.c

      - name: Suppress unused warning for gd_variance
        run: |
          cd "${{ env.CONFIG }}"
          sed -i '/uint32 chanspec = 0, gd_variance = 0;/a\        (void)gd_variance;' google-modules/wlan/bcm4398/dhd_rtt.c

      - name: Fix pkt_cnt_msg declaration in dhd_linux_pktdump.c
        run: |
         cd "${{ env.CONFIG }}"
         sed -i '/^static const char pkt_cnt_msg.*=\s*{/i \
         #ifndef __unused\n#define __unused __attribute__((__unused__))\n#endif' \
         google-modules/wlan/bcm4398/dhd_linux_pktdump.c

      - name: Fix invalid macro names and usages in GCIP mailbox
        run: |
         cd "${{ env.CONFIG }}"

         echo "Patching invalid macro definitions in .gcip_defs.h..."
         find . -name .gcip_defs.h -exec sed -i -E \
         's/#define ([a-zA-Z0-9_]+)\.llvm\.[0-9]+/#define \1_llvm_fix/' {} +

          echo "Patching all source files that use broken macro names..."
          find . -type f -name '*.c' -exec sed -i \
          's/gcip_mailbox_do_consume_responses/gcip_mailbox_do_consume_responses_llvm_fix/g' {} +

          echo "Macro patch complete."





      - name: Build the Kernel (with warning suppressions)
        run: |
          cd "${{ env.CONFIG }}"
          export KCFLAGS="-Wno-c23-extensions -Wno-c99-extensions -Wno-unused-variable -Wno-unused-const-variable -Wno-cast-function-type-strict -Wno-parentheses-equality -Wno-format-security"
          make O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j$(nproc)
          ccache --show-stats

      - name: Copy Images
        run: |
          cd "${{ env.CONFIG }}"
          cp out/arch/arm64/boot/Image.lz4 ../AnyKernel3/Image.lz4
          cat out/google-devices/zuma/dts/*.dtb > ../AnyKernel3/dtb

      - name: Create Flashable ZIP
        run: |
          cd AnyKernel3
          ZIP_NAME="${{ inputs.codename }}_ltotest_${{ github.sha }}.zip"
          zip -r "../$ZIP_NAME" ./*

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-${{ inputs.codename }}
          path: |
            ./${{ inputs.codename }}_ltotest_*.zip
