name: ltotest

permissions:
  contents: write  
  actions: write   

on:
  workflow_call: 
    inputs:
      codename:
        required: true
        type: string
      repo:
        required: true
        type: string

jobs:
  ltotest:
    runs-on: ubuntu-latest

    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          swap-size-mb: 8192
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Installing dependencies
        run: |
          sudo apt update
          sudo apt install -y gcc-aarch64-linux-gnu bc bison flex libssl-dev \
            libncurses5-dev git curl python3 zlib1g-dev libelf-dev ccache wget zip

      - name: Set CONFIG Environment Variable
        run: |
          CONFIG="${{ inputs.repo }}"
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV

      - name: Clone AnyKernel3 and Kernel Source
        run: |
          git clone https://github.com/spanish33/AnyKernel3.git -b 15.0.0-sultan-zuma
          git clone https://github.com/spanish33/${{ inputs.repo }} -b sultan-susfs

      - name: Add KernelSU
        run: |
          cd "${{ env.CONFIG }}"
          curl -LSs "https://raw.githubusercontent.com/spanish33/kernelsu/main/kernel/setup.sh" | bash -

      - name: Add SUSFS Configuration
        run: |
          cd "${{ env.CONFIG }}"
          DEFCONFIG=arch/arm64/configs/${{ inputs.codename }}_defconfig

          echo "CONFIG_KSU=y" >> $DEFCONFIG
          echo "CONFIG_KSU_WITH_KPROBES=n" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> $DEFCONFIG
          echo "CONFIG_TMPFS_XATTR=y" >> $DEFCONFIG
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> $DEFCONFIG

      - name: Update Local Version
        run: |
          cd "${{ env.CONFIG }}"
          sed -i 's/CONFIG_LOCALVERSION="-Sultan"/CONFIG_LOCALVERSION="-android14-11-gd7dac4b14270-ab12946699"/' \
            ./arch/arm64/configs/${{ inputs.codename }}_defconfig

      - name: Generate Config and Enable ThinLTO
        run: |
          cd "${{ env.CONFIG }}"
          make O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- ${{ inputs.codename }}_defconfig
          make O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- olddefconfig

          # Enable GCC LTO + ThinLTO
          scripts/config --file out/.config -e LTO
          scripts/config --file out/.config -e LTO_GCC
          scripts/config --file out/.config -e THINLTO

          make O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- olddefconfig

      - name: Patch Makefile to allow LTO
        run: |
          cd "${{ env.CONFIG }}"
          sed -i '/ifdef CONFIG_LTO/,/endif/ s/-fno-lto//' Makefile

      - name: Build the Kernel
        run: |
          cd "${{ env.CONFIG }}"
          make O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j$(nproc --all)

      - name: Copy Kernel Images
        run: |
          cd "${{ env.CONFIG }}"
          cp out/arch/arm64/boot/Image.lz4 ../AnyKernel3/Image.lz4
          cat out/google-devices/zuma/dts/*.dtb > ../AnyKernel3/dtb

      - name: Create Flashable ZIP
        run: |
          cd AnyKernel3
          ZIP_NAME="${{ inputs.codename }}_Test_ThinLTO.zip"
          zip -r "../$ZIP_NAME" ./*

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-${{ inputs.codename }}
          path: |
            *.zip
